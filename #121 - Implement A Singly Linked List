public class SinglyLinkedList {
    // Node class for individual elements in the linked list
    public class Node {
        public Integer data;
        public Node next;

        public Node(Integer value) {
            this.data = value;
            this.next = null;
        }
    }

    // Class variables
    private Node head;
    private Node tail;
    private Integer size;

    // Constructor to initialize the linked list
    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }

    // Method to add a new element to the front of the list
    public void addToFront(Integer value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
        size++;
    }

    // Method to remove the element from the front of the list
    public Integer removeFromFront() {
        if (head == null) {
            return null; // List is empty
        }

        Integer removedValue = head.data;
        head = head.next;
        size--;

        if (size == 0) {
            tail = null; // If the list becomes empty, update the tail
        }

        return removedValue;
    }

    // Method to get the current size of the list
    public Integer size() {
        return size;
    }

    // Method to add a new element to the end of the list
    public void addToTail(Integer value) {
        Node newNode = new Node(value);
        if (tail == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
        size++;
    }

    // Method to remove the element from the end of the list
    public Integer removeFromTail() {
        if (head == null) {
            return null; // List is empty
        }

        Integer removedValue;
        if (size == 1) {
            removedValue = head.data;
            head = null;
            tail = null;
        } else {
            Node secondLast = head;
            while (secondLast.next.next != null) {
                secondLast = secondLast.next;
            }
            removedValue = secondLast.next.data;
            secondLast.next = null;
            tail = secondLast;
        }

        size--;

        return removedValue;
    }
}
///////Anonymous window code below: //////
// Creating an instance of SinglyLinkedList
SinglyLinkedList linkedList = new SinglyLinkedList();

// Adding elements to the front
linkedList.addToFront(3);
linkedList.addToFront(2);
linkedList.addToFront(1);

// Removing an element from the front
Integer removedValue = linkedList.removeFromFront();
System.debug('Removed from front: ' + removedValue);

// Getting the current size
Integer currentSize = linkedList.size();
System.debug('Current size: ' + currentSize);

// Adding elements to the tail
linkedList.addToTail(4);
linkedList.addToTail(5);

// Removing an element from the tail
Integer removedTailValue = linkedList.removeFromTail();
System.debug('Removed from tail: ' + removedTailValue);

// Getting the current size again
currentSize = linkedList.size();
System.debug('Current size: ' + currentSize);
